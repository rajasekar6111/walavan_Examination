"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _faker = require("@faker-js/faker");

var _react2 = require("@testing-library/react");

var _testing = require("../../../lib/testing");

var _theme = require("../../theme");

var _themes = require("../../themes");

var _Text = _interopRequireDefault(require("../src/Text"));

expect.addSnapshotSerializer(_testing.UIBoxSerializer);
test.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Text /> %s renders as expected', /*#__PURE__*/function () {
  var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_, size) {
    var text, _render, findByText;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            text = "Text ".concat(size);
            _render = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
              value: _themes.defaultTheme
            }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
              size: size
            }, text))), findByText = _render.findByText;
            _context.t0 = expect;
            _context.next = 5;
            return findByText(text);

          case 5:
            _context.t1 = _context.sent.outerHTML;
            (0, _context.t0)(_context.t1).toMatchSnapshot();

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
describe('Colors', function () {
  test('<Text /> accepts arbitrary theme values for color', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
    var _render2, findByText;

    return _regenerator["default"].wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _render2 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
              value: _themes.defaultTheme
            }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
              color: "muted"
            }, "Testing"), ' ')), findByText = _render2.findByText;
            _context2.t0 = expect;
            _context2.next = 4;
            return findByText('Testing');

          case 4:
            _context2.t1 = _context2.sent.outerHTML;
            (0, _context2.t0)(_context2.t1).toMatchSnapshot();

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  test('<Text /> does not render any color when a non-theme color is passed in ', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
    var _render3, findByText;

    return _regenerator["default"].wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _render3 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
              value: _themes.defaultTheme
            }, /*#__PURE__*/_react["default"].createElement(_Text["default"], {
              color: "SOMETHING DOESNT EXISt"
            }, "Testing"), ' ')), findByText = _render3.findByText;
            _context3.t0 = expect;
            _context3.next = 4;
            return findByText('Testing');

          case 4:
            _context3.t1 = _context3.sent.outerHTML;
            (0, _context3.t0)(_context3.t1).toMatchSnapshot();

          case 6:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
});
describe('Sizing', function () {
  var originalConsoleError = console.error;
  var mockFn = jest.fn();
  beforeEach(function () {
    console.error = mockFn;
  });
  afterEach(function () {
    console.error = originalConsoleError;
  });
  test('<Text /> has undefined behavior when trying to set arbitrary sizes', function () {
    (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      size: 800
    }));
    expect(mockFn.mock.calls.length).toBeGreaterThanOrEqual(1);
    expect(mockFn.mock.calls[0][0]).toMatchInlineSnapshot("\n      Extracted Styles:\n      box-sizing: border-box;\n      color: #474d66;\n      font-family: \"SF UI Text\", -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n\n\n      \"Warning: Failed %s type: %s%s\"\n    ");
  });
});
describe('Props', function () {
  it('should forward `className` prop', function () {
    var expected = _faker.faker.random.word().toLowerCase();

    var component = /*#__PURE__*/_react["default"].createElement(_Text["default"], {
      "data-testid": "text",
      className: expected
    }, "Testing");

    var _render4 = (0, _react2.render)(component),
        getByTestId = _render4.getByTestId;

    expect(getByTestId('text')).toHaveClass(expected);
  });
});