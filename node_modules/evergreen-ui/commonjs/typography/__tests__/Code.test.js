"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _react = _interopRequireDefault(require("react"));

var _faker = require("@faker-js/faker");

var _react2 = require("@testing-library/react");

var _testing = require("../../../lib/testing");

var _theme = require("../../theme");

var _themes = require("../../themes");

var _Code = _interopRequireDefault(require("../src/Code"));

expect.addSnapshotSerializer(_testing.UIBoxSerializer);
describe('Code', function () {
  it('Should render', function () {
    expect(function () {
      return (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_Code["default"], null, "This is my code"));
    }).not.toThrow();
  });
  it.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Code /> %s renders as expected', /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(_, size) {
      var text, _render, findByText;

      return _regenerator["default"].wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              text = "Text ".concat(size);
              _render = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
                value: _themes.defaultTheme
              }, /*#__PURE__*/_react["default"].createElement(_Code["default"], {
                size: size
              }, text))), findByText = _render.findByText;
              _context.t0 = expect;
              _context.next = 5;
              return findByText(text);

            case 5:
              _context.t1 = _context.sent.outerHTML;
              (0, _context.t0)(_context.t1).toMatchSnapshot();

            case 7:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }());
  it.each([['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600]])('<Code /> %s with minimal appearance specified renders as expected', /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(_, size) {
      var text, _render2, findByText;

      return _regenerator["default"].wrap(function _callee2$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              text = "Text ".concat(size);
              _render2 = (0, _react2.render)( /*#__PURE__*/_react["default"].createElement("div", null, /*#__PURE__*/_react["default"].createElement(_theme.ThemeProvider, {
                value: _themes.defaultTheme
              }, /*#__PURE__*/_react["default"].createElement(_Code["default"], {
                size: size,
                appearance: "minimal"
              }, text)))), findByText = _render2.findByText;
              _context2.t0 = expect;
              _context2.next = 5;
              return findByText(text);

            case 5:
              _context2.t1 = _context2.sent.outerHTML;
              (0, _context2.t0)(_context2.t1).toMatchSnapshot();

            case 7:
            case "end":
              return _context2.stop();
          }
        }
      }, _callee2);
    }));

    return function (_x3, _x4) {
      return _ref2.apply(this, arguments);
    };
  }());
  it('should pass through `className` prop', function () {
    var expected = _faker.faker.random.word().toLowerCase();

    var component = /*#__PURE__*/_react["default"].createElement(_Code["default"], {
      "data-testid": "code",
      className: expected
    }, "Testing");

    var _render3 = (0, _react2.render)(component),
        getByTestId = _render3.getByTestId;

    expect(getByTestId('code')).toHaveClass(expected);
  });
});