"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _react = _interopRequireDefault(require("react"));

var _react2 = require("@testing-library/react");

var _userEvent = _interopRequireDefault(require("@testing-library/user-event"));

var _textInput = require("../../text-input");

var _Autocomplete = _interopRequireDefault(require("../src/Autocomplete"));

var makeAutocompleteFixture = function makeAutocompleteFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/_react["default"].createElement(_Autocomplete["default"], props, function (renderProps) {
    var getInputProps = renderProps.getInputProps,
        getRef = renderProps.getRef,
        inputValue = renderProps.inputValue;
    return /*#__PURE__*/_react["default"].createElement(_textInput.TextInput, (0, _extends2["default"])({
      value: inputValue,
      ref: getRef
    }, getInputProps(), {
      "data-testid": "TextInput"
    }));
  });
};

makeAutocompleteFixture.displayName = "makeAutocompleteFixture";
describe('Autocomplete', function () {
  describe('when allowOtherValues is false', function () {
    describe('when input field loses focus', function () {
      it('should clear input value', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        var items, textInput;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                items = ['Apple', 'Orange'];
                (0, _react2.render)(makeAutocompleteFixture({
                  allowOtherValues: false,
                  items: items
                }));
                _context.next = 4;
                return _react2.screen.findByTestId('TextInput');

              case 4:
                textInput = _context.sent;

                _userEvent["default"].click(textInput);

                _userEvent["default"].type(textInput, 'A'); // Change focus by clicking off of the component


                _userEvent["default"].click(document.body);

                expect(textInput).not.toHaveValue();

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
    });
  });
  describe('when allowOtherValues is true', function () {
    describe('when item from list is selected', function () {
      it('should set input value to selected item', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var items, textInput, item;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                items = ['Apple', 'Orange'];
                (0, _react2.render)(makeAutocompleteFixture({
                  allowOtherValues: true,
                  items: items
                })); // Type 'A' into the input to filter items down containing the string

                _context2.next = 4;
                return _react2.screen.findByTestId('TextInput');

              case 4:
                textInput = _context2.sent;

                _userEvent["default"].click(textInput);

                _userEvent["default"].type(textInput, 'A'); // Click the 'Apple' option, which should also update the input element


                _context2.next = 9;
                return _react2.screen.findByText('Apple');

              case 9:
                item = _context2.sent;

                _userEvent["default"].click(item);

                expect(textInput).toHaveValue('Apple');

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
    });
    describe('when input field loses focus', function () {
      it('should maintain input value', /*#__PURE__*/(0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3() {
        var items, textInput;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                items = ['Apple', 'Orange'];
                (0, _react2.render)(makeAutocompleteFixture({
                  allowOtherValues: true,
                  items: items
                }));
                _context3.next = 4;
                return _react2.screen.findByTestId('TextInput');

              case 4:
                textInput = _context3.sent;

                _userEvent["default"].click(textInput);

                _userEvent["default"].type(textInput, 'A'); // Change focus by clicking off of the component


                _userEvent["default"].click(document.body);

                expect(textInput).toHaveValue('A');

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })));
    });
  });
});