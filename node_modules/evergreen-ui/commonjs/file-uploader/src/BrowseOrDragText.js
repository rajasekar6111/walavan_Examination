"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _typeof = require("@babel/runtime/helpers/typeof");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _isFunction = _interopRequireDefault(require("../../lib/is-function"));

var _scales = require("../../scales");

var _theme = require("../../theme");

var _typography = require("../../typography");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var internalStyles = {
  marginTop: (0, _scales.majorScale)(3),
  pointerEvents: 'none'
};

var BrowseOrDragText = function BrowseOrDragText(props) {
  var getBrowseOrDragText = props.browseOrDragText,
      disabled = props.disabled,
      maxFiles = props.maxFiles;
  var defaultOrDragCopy = "or drag ".concat(maxFiles === 1 ? 'a file' : 'files', " here");

  var _useTheme = (0, _theme.useTheme)(),
      colors = _useTheme.colors;

  var ctaTextColor = disabled ? colors.gray500 : colors.blue400;

  if (!(0, _isFunction["default"])(getBrowseOrDragText)) {
    return /*#__PURE__*/_react["default"].createElement(_typography.Paragraph, internalStyles, /*#__PURE__*/_react["default"].createElement(_typography.Text, {
      color: ctaTextColor
    }, "Browse "), /*#__PURE__*/_react["default"].createElement(_typography.Text, {
      color: disabled ? colors.gray500 : colors.gray700
    }, defaultOrDragCopy));
  }

  var browseOrDragText = getBrowseOrDragText(maxFiles);

  if (typeof browseOrDragText === 'string') {
    return /*#__PURE__*/_react["default"].createElement(_typography.Paragraph, internalStyles, /*#__PURE__*/_react["default"].createElement(_typography.Text, {
      color: ctaTextColor
    }, browseOrDragText));
  }

  return browseOrDragText;
};

BrowseOrDragText.propTypes = {
  /**
   * Function to return a string or component for the 'Browse or drag' text
   * @type {(maxFiles: number) => React.ReactNode}
   */
  browseOrDragText: _propTypes["default"].func,

  /**
   * Renders the text in a muted color
   */
  disabled: _propTypes["default"].bool,

  /**
   * Maximum number of files to accept
   */
  maxFiles: _propTypes["default"].number
};

var _default = /*#__PURE__*/(0, _react.memo)(BrowseOrDragText);

exports["default"] = _default;