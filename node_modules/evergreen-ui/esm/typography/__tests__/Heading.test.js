import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { render, screen } from '@testing-library/react';
import { UIBoxSerializer } from '../../../lib/testing';
import { ThemeProvider } from '../../theme';
import { defaultTheme } from '../../themes';
import Heading from '../src/Heading';
expect.addSnapshotSerializer(UIBoxSerializer);
test.each([['size 100', 100], ['size 200', 200], ['size 300', 300], ['size 400', 400], ['size 500', 500], ['size 600', 600], ['size 700', 700], ['size 800', 800], ['size 900', 900]])('<Heading /> %s renders as expected', /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, size) {
    var text, _render, findByText;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            text = "Heading ".concat(size);
            _render = render( /*#__PURE__*/React.createElement(ThemeProvider, {
              value: defaultTheme
            }, /*#__PURE__*/React.createElement(Heading, {
              size: size
            }, text))), findByText = _render.findByText;
            _context.t0 = expect;
            _context.next = 5;
            return findByText(text);

          case 5:
            _context.t1 = _context.sent.outerHTML;
            (0, _context.t0)(_context.t1).toMatchSnapshot();

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}());
test('Heading lets you override the underlying DOM element', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
  return _regeneratorRuntime.wrap(function _callee2$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          render( /*#__PURE__*/React.createElement(ThemeProvider, {
            value: defaultTheme
          }, /*#__PURE__*/React.createElement(Heading, {
            is: "h1"
          }, "Testing h1")));
          expect(screen.getByText('Testing h1', {
            selector: 'h1'
          })).toBeTruthy();

        case 2:
        case "end":
          return _context2.stop();
      }
    }
  }, _callee2);
})));