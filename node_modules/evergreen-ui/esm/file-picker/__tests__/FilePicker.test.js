import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { fireEvent, render } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import FilePicker, { CLASS_PREFIX } from '../src/FilePicker';

var getFileInput = function getFileInput(container) {
  return container.querySelector('input[type=file]');
};

var getTextInput = function getTextInput(container) {
  return container.querySelector('input[type=text]');
};

var getButton = function getButton(container) {
  return container.querySelector('button');
};

describe('<FilePicker />', function () {
  it('snapshot - no file selected', function () {
    var _render = render( /*#__PURE__*/React.createElement(FilePicker, null)),
        asFragment = _render.asFragment;

    expect(asFragment()).toMatchSnapshot();
  });
  it('snapshot - one file seleted', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
    var _render2, asFragment, container, fileInput;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            _render2 = render( /*#__PURE__*/React.createElement(FilePicker, null)), asFragment = _render2.asFragment, container = _render2.container;
            _context.next = 3;
            return getFileInput(container);

          case 3:
            fileInput = _context.sent;
            userEvent.upload(fileInput, [new File(['(⌐□_□)'], 'chucknorris.png', {
              type: 'image/png'
            })]);
            expect(asFragment()).toMatchSnapshot();

          case 6:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  })));
  it('snapshot - multiple files selected', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
    var _render3, asFragment, container, fileInput;

    return _regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _render3 = render( /*#__PURE__*/React.createElement(FilePicker, {
              multiple: true
            })), asFragment = _render3.asFragment, container = _render3.container;
            _context2.next = 3;
            return getFileInput(container);

          case 3:
            fileInput = _context2.sent;
            userEvent.upload(fileInput, [new File(['(⌐□_□)'], 'chucknorris.png', {
              type: 'image/png'
            }), new File(['(□_□¬)'], 'brucelee.png', {
              type: 'image/png'
            })]);
            expect(asFragment()).toMatchSnapshot();

          case 6:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  })));
  it('sets name', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
    var _render4, container, fileInput;

    return _regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            _render4 = render( /*#__PURE__*/React.createElement(FilePicker, {
              name: "hi"
            })), container = _render4.container;
            _context3.next = 3;
            return getFileInput(container);

          case 3:
            fileInput = _context3.sent;
            expect(fileInput).toBeDefined();
            expect(fileInput).toHaveClass("".concat(CLASS_PREFIX, "-file-input"));
            expect(fileInput).toHaveAttribute('type', 'file');
            expect(fileInput).toHaveAttribute('name', 'hi');

          case 8:
          case "end":
            return _context3.stop();
        }
      }
    }, _callee3);
  })));
  it('sets accept', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {
    var _render5, container, fileInput;

    return _regeneratorRuntime.wrap(function _callee4$(_context4) {
      while (1) {
        switch (_context4.prev = _context4.next) {
          case 0:
            _render5 = render( /*#__PURE__*/React.createElement(FilePicker, {
              accept: "application/json"
            })), container = _render5.container;
            _context4.next = 3;
            return getFileInput(container);

          case 3:
            fileInput = _context4.sent;
            expect(fileInput).toBeDefined();
            expect(fileInput).toHaveAttribute('accept', 'application/json');

          case 6:
          case "end":
            return _context4.stop();
        }
      }
    }, _callee4);
  })));
  it('sets required', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {
    var _render6, container, fileInput;

    return _regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            _render6 = render( /*#__PURE__*/React.createElement(FilePicker, {
              required: true
            })), container = _render6.container;
            _context5.next = 3;
            return getFileInput(container);

          case 3:
            fileInput = _context5.sent;
            expect(fileInput).toBeDefined();
            expect(fileInput).toHaveAttribute('required');

          case 6:
          case "end":
            return _context5.stop();
        }
      }
    }, _callee5);
  })));
  it('sets multiple', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {
    var _render7, container, fileInput;

    return _regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            _render7 = render( /*#__PURE__*/React.createElement(FilePicker, {
              multiple: true
            })), container = _render7.container;
            _context6.next = 3;
            return getFileInput(container);

          case 3:
            fileInput = _context6.sent;
            expect(fileInput).toBeDefined();
            expect(fileInput).toHaveAttribute('multiple');

          case 6:
          case "end":
            return _context6.stop();
        }
      }
    }, _callee6);
  })));
  it('sets disabled', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {
    var _render8, container, fileInput, button;

    return _regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            _render8 = render( /*#__PURE__*/React.createElement(FilePicker, {
              disabled: true
            })), container = _render8.container;
            _context7.next = 3;
            return getFileInput(container);

          case 3:
            fileInput = _context7.sent;
            expect(fileInput).toBeDefined();
            expect(fileInput).toHaveAttribute('disabled');
            _context7.next = 8;
            return getButton(container);

          case 8:
            button = _context7.sent;
            expect(button).toBeDefined();
            expect(button).toHaveAttribute('disabled');

          case 11:
          case "end":
            return _context7.stop();
        }
      }
    }, _callee7);
  })));
  it('sets capture', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {
    var _render9, container, fileInput;

    return _regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            _render9 = render( /*#__PURE__*/React.createElement(FilePicker, {
              capture: true
            })), container = _render9.container;
            _context8.next = 3;
            return getFileInput(container);

          case 3:
            fileInput = _context8.sent;
            expect(fileInput).toBeDefined();
            expect(fileInput).toHaveAttribute('capture');

          case 6:
          case "end":
            return _context8.stop();
        }
      }
    }, _callee8);
  })));
  it('passes through height', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {
    var _render10, container, input, button;

    return _regeneratorRuntime.wrap(function _callee9$(_context9) {
      while (1) {
        switch (_context9.prev = _context9.next) {
          case 0:
            _render10 = render( /*#__PURE__*/React.createElement(FilePicker, {
              height: 20
            })), container = _render10.container;
            _context9.next = 3;
            return getTextInput(container);

          case 3:
            input = _context9.sent;
            expect(input).toBeDefined();
            expect(input).toHaveStyle({
              height: '20px'
            });
            _context9.next = 8;
            return getButton(container);

          case 8:
            button = _context9.sent;
            expect(button).toBeDefined();
            expect(button).toHaveStyle({
              height: '20px'
            });

          case 11:
          case "end":
            return _context9.stop();
        }
      }
    }, _callee9);
  })));
  it('passes through props', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {
    var _render11, container, root;

    return _regeneratorRuntime.wrap(function _callee10$(_context10) {
      while (1) {
        switch (_context10.prev = _context10.next) {
          case 0:
            _render11 = render( /*#__PURE__*/React.createElement(FilePicker, {
              width: 20
            })), container = _render11.container;
            root = container.querySelector(".".concat(CLASS_PREFIX, "-root"));
            expect(root).toBeDefined();
            expect(root).toHaveStyle({
              width: '20px'
            });

          case 4:
          case "end":
            return _context10.stop();
        }
      }
    }, _callee10);
  })));
  it('calls onChange', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {
    var onChange, _render12, container, fileInput;

    return _regeneratorRuntime.wrap(function _callee11$(_context11) {
      while (1) {
        switch (_context11.prev = _context11.next) {
          case 0:
            onChange = jest.fn();
            _render12 = render( /*#__PURE__*/React.createElement(FilePicker, {
              onChange: onChange
            })), container = _render12.container;
            _context11.next = 4;
            return getFileInput(container);

          case 4:
            fileInput = _context11.sent;
            fireEvent.change(fileInput, {
              target: {
                files: [{
                  name: 'data.json'
                }]
              }
            });
            expect(onChange).toHaveBeenCalledTimes(1);

          case 7:
          case "end":
            return _context11.stop();
        }
      }
    }, _callee11);
  })));
  it('calls onBlur', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {
    var onBlur, _render13, container, input;

    return _regeneratorRuntime.wrap(function _callee12$(_context12) {
      while (1) {
        switch (_context12.prev = _context12.next) {
          case 0:
            onBlur = jest.fn();
            _render13 = render( /*#__PURE__*/React.createElement(FilePicker, {
              onBlur: onBlur
            })), container = _render13.container;
            _context12.next = 4;
            return getTextInput(container);

          case 4:
            input = _context12.sent;
            fireEvent.focus(input);
            fireEvent.blur(input, {
              target: {}
            });
            expect(onBlur).toHaveBeenCalledTimes(1);

          case 8:
          case "end":
            return _context12.stop();
        }
      }
    }, _callee12);
  })));
  it('sets placeholder', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {
    var placeholder, _render14, container, input;

    return _regeneratorRuntime.wrap(function _callee13$(_context13) {
      while (1) {
        switch (_context13.prev = _context13.next) {
          case 0:
            placeholder = 'placeholder here!';
            _render14 = render( /*#__PURE__*/React.createElement(FilePicker, {
              placeholder: placeholder
            })), container = _render14.container;
            _context13.next = 4;
            return getTextInput(container);

          case 4:
            input = _context13.sent;
            expect(input.placeholder).toEqual(placeholder);

          case 6:
          case "end":
            return _context13.stop();
        }
      }
    }, _callee13);
  })));
  it('sets browseOrReplaceText', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {
    var browseText, replaceText, replaceMultipleText, _render15, container, button, fileInput;

    return _regeneratorRuntime.wrap(function _callee14$(_context14) {
      while (1) {
        switch (_context14.prev = _context14.next) {
          case 0:
            browseText = 'Select';
            replaceText = 'Replace';
            replaceMultipleText = 'Replace all';
            _render15 = render( /*#__PURE__*/React.createElement(FilePicker, {
              multiple: true,
              browseOrReplaceText: function browseOrReplaceText(fileCount) {
                if (!fileCount) return browseText;
                if (fileCount === 1) return replaceText;
                return replaceMultipleText;
              }
            })), container = _render15.container;
            _context14.next = 6;
            return getButton(container);

          case 6:
            button = _context14.sent;
            expect(button).toHaveTextContent(browseText);
            _context14.next = 10;
            return getFileInput(container);

          case 10:
            fileInput = _context14.sent;
            userEvent.upload(fileInput, [new File(['(⌐□_□)'], 'chucknorris.png', {
              type: 'image/png'
            })]);
            expect(button).toHaveTextContent(replaceText);
            userEvent.upload(fileInput, [new File(['(⌐□_□)'], 'chucknorris.png', {
              type: 'image/png'
            }), new File(['(□_□¬)'], 'brucelee.png', {
              type: 'image/png'
            })]);
            expect(button).toHaveTextContent(replaceMultipleText);

          case 15:
          case "end":
            return _context14.stop();
        }
      }
    }, _callee14);
  })));
  it('sets inputText', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {
    var noFiles, oneFile, multipleFiles, _render16, container, textInput, fileInput;

    return _regeneratorRuntime.wrap(function _callee15$(_context15) {
      while (1) {
        switch (_context15.prev = _context15.next) {
          case 0:
            noFiles = ':(';
            oneFile = 'File: chucknorris.png';
            multipleFiles = 'Files: 2';
            _render16 = render( /*#__PURE__*/React.createElement(FilePicker, {
              multiple: true,
              inputText: function inputText(files) {
                if (!files.length) return noFiles;
                if (files.length === 1) return "File: ".concat(files[0].name);
                return "Files: ".concat(files.length);
              }
            })), container = _render16.container;
            _context15.next = 6;
            return getTextInput(container);

          case 6:
            textInput = _context15.sent;
            expect(textInput).toHaveValue(noFiles);
            _context15.next = 10;
            return getFileInput(container);

          case 10:
            fileInput = _context15.sent;
            userEvent.upload(fileInput, [new File(['(⌐□_□)'], 'chucknorris.png', {
              type: 'image/png'
            })]);
            expect(textInput).toHaveValue(oneFile);
            userEvent.upload(fileInput, [new File(['(⌐□_□)'], 'chucknorris.png', {
              type: 'image/png'
            }), new File(['(□_□¬)'], 'brucelee.png', {
              type: 'image/png'
            })]);
            expect(textInput).toHaveValue(multipleFiles);

          case 15:
          case "end":
            return _context15.stop();
        }
      }
    }, _callee15);
  })));
});