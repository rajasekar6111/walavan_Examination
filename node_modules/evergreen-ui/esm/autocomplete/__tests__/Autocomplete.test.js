import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import _extends from "@babel/runtime/helpers/esm/extends";
import _regeneratorRuntime from "@babel/runtime/regenerator";
import React from 'react';
import { render, screen } from '@testing-library/react';
import userEvent from '@testing-library/user-event';
import { TextInput } from '../../text-input';
import Autocomplete from '../src/Autocomplete';

var makeAutocompleteFixture = function makeAutocompleteFixture() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return /*#__PURE__*/React.createElement(Autocomplete, props, function (renderProps) {
    var getInputProps = renderProps.getInputProps,
        getRef = renderProps.getRef,
        inputValue = renderProps.inputValue;
    return /*#__PURE__*/React.createElement(TextInput, _extends({
      value: inputValue,
      ref: getRef
    }, getInputProps(), {
      "data-testid": "TextInput"
    }));
  });
};

makeAutocompleteFixture.displayName = "makeAutocompleteFixture";
describe('Autocomplete', function () {
  describe('when allowOtherValues is false', function () {
    describe('when input field loses focus', function () {
      it('should clear input value', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {
        var items, textInput;
        return _regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                items = ['Apple', 'Orange'];
                render(makeAutocompleteFixture({
                  allowOtherValues: false,
                  items: items
                }));
                _context.next = 4;
                return screen.findByTestId('TextInput');

              case 4:
                textInput = _context.sent;
                userEvent.click(textInput);
                userEvent.type(textInput, 'A'); // Change focus by clicking off of the component

                userEvent.click(document.body);
                expect(textInput).not.toHaveValue();

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      })));
    });
  });
  describe('when allowOtherValues is true', function () {
    describe('when item from list is selected', function () {
      it('should set input value to selected item', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {
        var items, textInput, item;
        return _regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                items = ['Apple', 'Orange'];
                render(makeAutocompleteFixture({
                  allowOtherValues: true,
                  items: items
                })); // Type 'A' into the input to filter items down containing the string

                _context2.next = 4;
                return screen.findByTestId('TextInput');

              case 4:
                textInput = _context2.sent;
                userEvent.click(textInput);
                userEvent.type(textInput, 'A'); // Click the 'Apple' option, which should also update the input element

                _context2.next = 9;
                return screen.findByText('Apple');

              case 9:
                item = _context2.sent;
                userEvent.click(item);
                expect(textInput).toHaveValue('Apple');

              case 12:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      })));
    });
    describe('when input field loses focus', function () {
      it('should maintain input value', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {
        var items, textInput;
        return _regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                items = ['Apple', 'Orange'];
                render(makeAutocompleteFixture({
                  allowOtherValues: true,
                  items: items
                }));
                _context3.next = 4;
                return screen.findByTestId('TextInput');

              case 4:
                textInput = _context3.sent;
                userEvent.click(textInput);
                userEvent.type(textInput, 'A'); // Change focus by clicking off of the component

                userEvent.click(document.body);
                expect(textInput).toHaveValue('A');

              case 9:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      })));
    });
  });
});